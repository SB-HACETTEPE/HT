#include <EtherCard.h>
#define TFT_CS   A3
#define TFT_DC   0
#define TFT_MOSI 8
#define TFT_CLK  9
#define TFT_MISO 10
#define TFT_LED  A2  
// IP Settings
#define PORT    1900
static byte mymac[] = { 0x74, 0x69, 0x69, 0x2D, 0x30, 0x31 };
static byte myip[] = { 192, 168, 5, 1 };
byte Ethernet::buffer[500];
BufferFiller bfill;

//==============================================================================


static word HomePage(word useRed)
{
  bfill = ether.tcpOffset();
  bfill.emit_p(PSTR(
                 "HTTP/1.0 200 OK\r\n"
                 "Content-Type: text/html\r\n"
                 "Pragma: no-cache\r\n"
                 "\r\n"
                  "<head>"
                  "<style>"
                  "body {background-color:lightgray}"
                  "h1   {color:$S}"
                  "</style>"
                  "<title>Hello!</title>"
                 "<h1>Giriş yapmak için lütfen Kullancı adı ve şifreyi girin</h1>"), useRed ? "red" : "blue");
		"<form action="/action_page.php" method="post" target="_blank">
		 <label for="fname">Username:</label>
		 <input type="text" id="fname" name="fname"><br><br>
		 <label for="lname">Password:</label>
		 <input type="text" id="lname" name="lname"><br><br>
		 <input type="submit" value="Giriş Yap">
                  </form>"
  return bfill.position();
}










//==============================================================================
void setup() {
  //Initialize serial and wait for port to open:

  
 
   if (ether.begin(sizeof Ethernet::buffer, mymac) == 0)
  {
    Serial.println("Failed to access Ethernet controller");
  }
   ether.staticSetup(myip);
   ether.hisport = 8080;










  pinMode(TFT_LED, OUTPUT); // define as output for backlight control
  // initialize the TFT
  Serial.println("Init TFT ...");
  tft.begin();          
  tft.setRotation(3);   // landscape mode  
  tft.fillScreen(ILI9341_BLACK);// clear screen 

  tft.setCursor(70,110);
  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(3);
  digitalWrite(TFT_LED, LOW);    // turn backlight on; 
  //==================================================





 
}
//==================================================
void loop() {
   
   memcpy_P(ether.tcpOffset(), page, sizeof page);
   ether.httpServerReply(sizeof page – 1);
  
   
   HTTPClient http;
    
   word len = ether.packetReceive();
   word pos = ether.packetLoop(len);
   if (pos)  // check if valid tcp data is received
   {
      bfill = ether.tcpOffset();
      char* data = (char*) Ethernet::buffer + pos;
      if (strncmp("GET /", data, 5) != 0)
      {
        bfill.emit_p(HttpNotFound);
      }
      else
      {
        data += 5;
        if (strncmp("?red", data, 4) == 0) 
        {
          HomePage(1);
        }
        else 
        {
          HomePage(0);
        }
      }
      ether.httpServerReply(bfill.position());    // send http response
    }          
   // Send HTTP POST request
   int httpResponseCode = http.POST(httpRequestData);    
   // If you need an HTTP request with a content type: application/json, use the following:
   http.addHeader("Content-Type", "application/json");

  // Structure to store values comes from a sensor
   struct Device_ID {
   int succes;
   int   tm;
   int   cno;
    } ;  


   struct Device_ID Device_ID_jobject;
  //------------------------------------------
  // Information that is supposed to come from correspondent response(Stored staticly for the sake of the example)
  Device_ID.succes = 00000642;
  Device_ID.tm = 1631045596;
  Device_ID.cno = 1001;
  //------------------------------------------

   var Device_ID_jobject ={\"succes\": Device_ID.succes ,\"tm\":Device_ID.tm,\"cno\":\Device_ID.cno};


   // Convert JSON to string
   var JSONString=JSON.stringify(jobject); 
   // Post to the server
   int httpResponseCode = http.POST(JSONString);
   // Write json String to EEPROM
   EEPROM_string_write( 120, JSONString);

   //========================================

 	

   // int temp = analogRead(pinTemp);    //Read the rempreture

   // int Humidity = analogRead(pinTemp);    //Read the humidity value




//================================================
// Structure to store values comes from a sensor
 struct Sensor_Values {
   int succes;
   int   tm;
   int   cv;
   int   yv;
   int   hp;
   int   v0;
   int   v1;
 } ;  
 //================================================


struct Sensor_Values Humidity;
struct Sensor_Values Tempreture;
//================================================
// Fiziksel olarak microcontrolere bağlancak olan nem sensorunden gelecek değerleri, oluşturduğumuz structure instance'te saklıyoruz.
// Sensorlerin şuanda fiziksel olarak bağlı olmadan deney amaçlı direkt rakam olarak veriyoruz.
//=================================
// Assigning values coming from the humidity sensor
Humidity.succes = 1001;
Humidity.tm = 1631045596
Humidity.cv = 100000642;
Humidity.yv = 1631045596;
Humidity.hp = 1631045596;
Humidity.v0 = 0
Humidity.v1 = 0
//================================
// Assigning values coming from the tempreture sensor
Tempreture.succes = 1021;
Tempreture.tm = 1631045596
Tempreture.cv = 100000642;
Tempreture.yv = 1631045596;
Tempreture.hp = 1631045596;
Tempreture.v0 = 0
Tempreture.v1 = 0


//================================
// Creating Json Object
   var h_j_object ={"succes":Humidity.succes,"tm":Humidity.tm,"cv":Humidity.cv, "yv":Humidity.yv,"hp":Humidity.hp,"alarm":"{"
   v0":Humidity.v0,"v1":Humidity.v1}"};(Assumed value, for the sake of the expirement)
   

   var t_j_object ={"succes":Tempreture.succes,"tm":Tempreture.tm,"cv":Tempreture.cv, "yv":Tempreture.yv,"hp":Tempreture.hp,"alarm":"{"
   v0":Tempreture.v0,"v1":Tempreture.v1}"};(Assumed value, for the sake of the expirement)
   
//==================================================


   // Convert JSON to string
   var t_JSONString=JSON.stringify(t_j_object); 
   var h_JSONString=JSON.stringify(h_j_object); 
   void Print_screen(t_JSONString);//print temp application/json header to the screen
   void Print_screen(h_JSONString);//print humidity application/json header to the screen
   delay(900000); // This will cause program to pause for 15 mins.
}
//===============================================================================



//Print To Screen================================================================
  
void Print_screen(String str)
  tft.fillScreen(ILI9341_BLACK);// clear screen
  tft.setCursor(5,70);
  tft.setTextColor(ILI9341_RED);
  tft.print(str);
  tft.setCursor(190,70);
  tft.print("Logged in successfully");


//===============================================================================



Write To RRPROM Function=======================================================
#include <EEPROM.h>

void EEPROM_string_write(int Offset, const String &str)
{
   EEPROM.write(address, value);
   byte len = strToWrite.length();
   EEPROM.write(addrOffset, len);
   for (int i = 0; i < len; i++)
   {
     EEPROM.write(Offset + 1 + i, str[i]);
   }
}
//==============================================================================



//Read From EEPROM =============================================================

String readStringFromEEPROM(int Offset)
{
  int StrLen = EEPROM.read(Offset);
  char data[StrLen + 1];
  for (int i = 0; i < StrLen; i++)
  {
    data[i] = EEPROM.read(addrOffset + 1 + i);
  }
  data[StrLen] = '\0'
  return String(data);
}

